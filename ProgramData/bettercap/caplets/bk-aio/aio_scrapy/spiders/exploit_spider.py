import scrapy
import os

class ExploitSpider(scrapy.Spider):
    name = "exploit_spider"

    def start_requests(self):
        # URLs for known exploit databases
        urls = ['https://www.exploit-db.com/', 'https://www.cvedetails.com/']
        for url in urls:
            yield scrapy.Request(url=url, callback=self.parse)

    def parse(self, response):
        # Expanded list of target keywords for various router brands and vulnerabilities
        target_keywords = [
            'D-Link', 'Router', 'Mac filtering bypass', 'VLAN hopping',
            'TP-Link', 'Netgear', 'Cisco', 'Linksys', 'Asus',
            'Belkin', 'Huawei', 'ZTE', 'Mikrotik', 'SonicWall',
            'Fortinet', 'OpenWrt', 'DD-WRT', 'WPA2 vulnerability',
            'Default credentials', 'Remote code execution',
            'TP-LINK', 'Linksys', 'Netgear', 'Cisco', 'D-Link',
            'Zyxel', 'Tenda', 'Arris', 'Apple', 'Buffalo',
            'Edimax', 'Trendnet', 'SonicWall', 'Juniper',
            'Huawei', 'Alcatel', 'Motorola', 'Palo Alto',
            'Ubiquiti', 'DrayTek', 'TP-Link', 'Mikrotik',
            'Fritz!Box', 'Netopia', '3Com', 'D-Link',
            'Linksys', 'ZTE', 'Zyxel', 'Sierra Wireless',
            'Actiontec', 'Belkin', 'Buffalo', 'SonicWall',
            'OpenWrt', 'DD-WRT', 'WPA3 vulnerability', 'Remote access',
            'Firmware update', 'VLAN configuration', 'Wireless security',
            'Default login', 'Admin panel', 'Router password',
            'Network security', 'IoT security', 'VPN passthrough',
            'RDP vulnerability', 'SSH access', 'Telnet access'
        ]

        found_exploits = []
        
        # Check for each keyword in the response text
        for keyword in target_keywords:
            if keyword.lower() in response.text.lower():  # Case insensitive search
                found_exploits.append(f"Found exploit for {keyword}: {response.url}")

        # Write to file if any exploits were found
        if found_exploits:
            self.write_to_file(found_exploits)

    def write_to_file(self, exploits):
        output_file_path = os.path.join('found_exploits.txt')
        try:
            with open(output_file_path, 'a') as f:
                for exploit in exploits:
                    f.write(exploit + '\n')
            self.log(f"Successfully wrote {len(exploits)} exploits to {output_file_path}")
        except IOError as e:
            self.log(f"Error writing to file: {e}", level=scrapy.log.ERROR)